## GAME OVERVIEW
- This game is a browser based, massively multiplayer real-time strategy game.
- Isometric geometry with tile based map
- Human players vs. AI.
- Short matches no longer than 1 hour.
- Game map and difficulty changes every game.
- AI will be involved in creating game (map, other parameters) - later feature.
- At start of game the number of connected clients determines the map size
- goal is to be able to have hundreds or possibly thousands of players in a single game

## Current State
- Map loads with human and AI base
- Inconsistently renders map fully
- Inconsistently shows a unit of a connected client
- When a unit does load it is selectable and can be moved correctly

// cursorrules - Client-Server Responsibility Definition

# Server-Side Responsibilities
- Authoritative management of game state (units, buildings, resources)
- Validation and execution of player commands
- Game logic processing (combat resolution, production timers, resource extraction)
- State synchronization and broadcasting to clients
- Player connection management (join, disconnect, state initialization)

# Client-Side Responsibilities
- Rendering of entities, map, and UI elements
- Input capture and immediate visual feedback for player interactions
- Smooth visual interpolation between server updates (entity movement interpolation)
- User interface management (selection, unit/building status, minimap, HUD)
- Camera viewport handling (scroll, zoom, minimap navigation)
- Efficient resource (image) loading and fallback strategies

## Client-Server Protocol and Interaction
- Clients send requests for actions (movement, building, attacks); server responds with authoritative updates
- Clients perform visual interpolation to smooth transitions between server updates
- Server regularly broadcasts game state snapshots for synchronization
- Clients maintain local prediction for responsiveness, corrected periodically by server updates

## Next Goals
- 

## Client side File Structure
massive-rts/
â””â”€â”€ src/
    â”œâ”€â”€ entities/
    â”‚   â”œâ”€â”€ Entity.js                 # Base class for game entities (units, buildings)
    â”‚   â”œâ”€â”€ Unit.js                   # Player/AI-controlled units with movement and combat logic
    â”‚   â””â”€â”€ Building.js               # Player and AI buildings (bases, barracks, etc.)
    â”‚
    â”œâ”€â”€ game/
    â”‚   â”œâ”€â”€ Game.js                   # Main game controller (game loop, entity management)
    â”‚   â”œâ”€â”€ Camera.js                 # Camera management (viewport, zoom, pan)
    â”‚   â”œâ”€â”€ Config.js                 # Global game configuration (map, entities, camera)
    â”‚   â”œâ”€â”€ Renderer.js               # Handles rendering of the game (entities, tiles, UI)
    â”‚   â”œâ”€â”€ InputHandler.js           # Captures and processes user input (mouse, keyboard)
    â”‚   â”œâ”€â”€ Multiplayer.js            # Client-side multiplayer logic (socket communications)
    â”‚   â”œâ”€â”€ BuildingImageLoader.js    # Loads and manages building images
    â”‚   â””â”€â”€ UnitImageLoader.js        # Loads and manages unit images
    â”‚
    â”œâ”€â”€ map/
    â”‚   â”œâ”€â”€ Map.js                    # Manages game map, tiles, and terrain types
    â”‚   â””â”€â”€ Tile.js                   # Represents individual map tiles (terrain, resources)
    â”‚
    â””â”€â”€ tools/
        â”œâ”€â”€ generateDetailedImages.js # Script for generating detailed graphical assets
        â””â”€â”€ generateImages.js         # Node.js script for asset image generation

## Server-side
massive-rts/
â””â”€â”€ server/
    â”œâ”€â”€ server.js                     # Main server entry point (initializes the server and Socket.IO)
    â”œâ”€â”€ GameServer.js                 # Manages game logic on the server side, authoritative game state
    â”œâ”€â”€ Player.js                     # Represents connected player instances and their states
    â”œâ”€â”€ EntityServer.js               # Base server-side entity class with authoritative logic
    â”œâ”€â”€ UnitServer.js                 # Server-side unit logic (movement, combat)
    â”œâ”€â”€ BuildingServer.js             # Server-side building logic (production, health)
    â”œâ”€â”€ MapGenerator.js               # Procedural generation of game map and resources
    â””â”€â”€ ConfigServer.js               # Server-specific configurations (tick rate, player limits, map size)



## Rules To Follow
- Only modify client OR server side functionality at a time.  Get permission explicitly if changing from one to the other.
- Do not overcomplicate git commits. .add, commit, push.  Same with reset - reset Head
- Only start and stop program with ./start, ./stop
- Render a procedurally generated terrain on HTML5 Canvas.
- Use modern JavaScript (ES6+) or TypeScript (preferred).
- Classes and methods should be modular, small, and clear.
- Favor readability and clarity over cleverness.
- Consistently comment on purpose, not obvious implementation details.
- Public assets (HTML, CSS, static files): `/public`
- Source code organized clearly under `/src`
- Classes should represent clearly defined responsibilities.
- Maintain clear separation of concerns:
- Game logic vs. rendering vs. input handling.
- No tight coupling; pass dependencies explicitly.
- Encapsulate logic within relevant classes.
- Comment all class methods succinctly (single-line description above method).
- Encourage small, iterative improvements over large, sweeping changes.
- Clearly communicate next steps upon task completion.
- Always provide basic error handling, especially around user inputs and interactions.
- Always reference and reuse existing project code where possible.


## ðŸ”Ž Thought Process Checklist (Before Providing Code)
1. Does the provided code fulfill the requested functionality clearly and simply?
2. Is the code structure consistent with the established file and class structure?
3. Are there clear, actionable next steps provided?
4. Is the scalability considered?
5. Are instructions for testing and validation clear?

## Ignore Patterns
- **/node_modules/**
- **/dist/**
- **/.git/**

